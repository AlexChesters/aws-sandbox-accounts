Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31
Description: Infrastructure for aws-sandbox-accounts account-manager
Parameters:
  Environment:
    Description: The infrastructure environment
    Type: String
    AllowedValues:
      - test
      - live
Resources:
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.amazonaws.com
      Policies:
        - PolicyName: state-machine-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action:
                  - lambda:InvokeFunction
                  Resource:
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}-aws-sandbox-accounts-account-manager-db-client"
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${Environment}-aws-sandbox-accounts-account-manager"
      RoleArn: !GetAtt StateMachineRole.Arn
      # Use DefinitionString rather than Definition so that we can use null values
      DefinitionString:
        Fn::ToJsonString:
          StartAt: MarkAccountAsDirty
          States:
            # TEMP - force one account to always be in the dirty state for testing purposes
            MarkAccountAsDirty:
              Type: Task
              Resource: arn:aws:states:::lambda:invoke
              Next: FetchDirtyAccounts
              Parameters:
                FunctionName: !Sub "${Environment}-aws-sandbox-accounts-account-manager-db-client"
                Payload:
                  action: mark_as_dirty
                  params:
                    account_id: "905418121097"
              ResultPath: null
            FetchDirtyAccounts:
              Type: Task
              Resource: arn:aws:states:::lambda:invoke
              End: true
              Parameters:
                FunctionName: !Sub "${Environment}-aws-sandbox-accounts-account-manager-db-client"
                Payload:
                  action: fetch_dirty
              OutputPath: $.Payload
