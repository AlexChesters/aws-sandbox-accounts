Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31
Description: Infrastructure for aws-sandbox-accounts account-manager
Parameters:
  Environment:
    Description: The infrastructure environment
    Type: String
    AllowedValues:
      - test
      - live
Resources:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      ManagedPolicyArns:
        - !ImportValue ci-infrastructure-codebuild-base-iam-policy
      RoleName: !Sub "${Environment}-aws-sandbox-accounts-aws-nuke"
  CodeBuildProjectLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "${Environment}-aws-sandbox-accounts-aws-nuke"
      RetentionInDays: 30
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      TimeoutInMinutes: 10
      Description: runs aws-nuke against sandbox accounts
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      Name: !Sub "${Environment}-aws-sandbox-accounts-aws-nuke"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref CodeBuildProjectLogGroup
          Status: ENABLED
      Source:
        Type: GITHUB
        Location: https://github.com/AlexChesters/aws-sandbox-accounts.git
        BuildSpec: apps/account-manager/buildspec.yml
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.amazonaws.com
      Policies:
        - PolicyName: state-machine-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action:
                    - codebuild:StartBuild
                    - codebuild:StopBuild
                    - codebuild:BatchGetBuilds
                  Resource:
                    - !GetAtt CodeBuildProject.Arn
                - Effect: Allow
                  Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                  Resource:
                  - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventForCodeBuildStartBuildRule"
                - Effect: Allow
                  Action:
                  - lambda:InvokeFunction
                  Resource:
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}-aws-sandbox-accounts-account-manager-db-client"
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${Environment}-aws-sandbox-accounts-account-manager"
      RoleArn: !GetAtt StateMachineRole.Arn
      # Use DefinitionString rather than Definition so that we can use null values
      DefinitionString:
        Fn::ToJsonString:
          StartAt: MarkAccountAsDirty
          States:
            # TEMP - force one account to always be in the dirty state for testing purposes
            MarkAccountAsDirty:
              Type: Task
              Resource: arn:aws:states:::lambda:invoke
              Next: FetchDirtyAccounts
              Parameters:
                FunctionName: !Sub "${Environment}-aws-sandbox-accounts-account-manager-db-client"
                Payload:
                  action: mark_as_dirty
                  params:
                    account_id: "905418121097"
              ResultPath: null
            FetchDirtyAccounts:
              Type: Task
              Resource: arn:aws:states:::lambda:invoke
              Next: ProcessAccounts
              Parameters:
                FunctionName: !Sub "${Environment}-aws-sandbox-accounts-account-manager-db-client"
                Payload:
                  action: fetch_dirty
              OutputPath: $.Payload
            ProcessAccounts:
              Type: Map
              End: true
              ItemSelector:
                account_id.$: $$.Map.Item.Value.sk.S
              ItemProcessor:
                ProcessorConfig:
                  Mode: INLINE
                StartAt: AWSNuke
                States:
                  AWSNuke:
                    Type: Task
                    Resource: arn:aws:states:::codebuild:startBuild.sync
                    TimeoutSeconds: 900
                    Next: MarkAccountAsAvailable
                    ResultPath: null
                    Parameters:
                      ProjectName: !Ref CodeBuildProject
                      EnvironmentVariablesOverride:
                        - Type: PLAINTEXT
                          Name: ACCOUNT_ID
                          Value.$: $.account_id
                    Catch:
                      - ErrorEquals:
                          - States.ALL
                        Next: MarkAccountAsFailed
                        ResultPath: null
                  MarkAccountAsAvailable:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    End: true
                    Parameters:
                      FunctionName: !Sub "${Environment}-aws-sandbox-accounts-account-manager-db-client"
                      Payload:
                        action: mark_as_available
                        params:
                          account_id.$: $.account_id
                    ResultPath: null
                  MarkAccountAsFailed:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    End: true
                    Parameters:
                      FunctionName: !Sub "${Environment}-aws-sandbox-accounts-account-manager-db-client"
                      Payload:
                        action: mark_as_failed
                        params:
                          account_id.$: $.account_id
                    ResultPath: null
