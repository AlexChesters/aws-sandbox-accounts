Transform: AWS::Serverless-2016-10-31
Description: Infrastructure for aws-sandbox-accounts API
Parameters:
  Environment:
    Description: The infrastructure environment
    Type: String
    AllowedValues:
      - test
      - live
Conditions:
  IsTest: !Equals [!Ref Environment, test]
Mappings:
  EnvMap:
    test:
      DomainName: test.api.sandbox.alexchesters.com
    live:
      DomainName: api.sandbox.alexchesters.com
Resources:
  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "${Environment}-aws-sandbox-accounts-api"
      RetentionInDays: 7
  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: !Sub "${Environment}-aws-sandbox-accounts-api"
      Policies:
        - PolicyName: lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:BatchGetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                  Resource:
                    - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Environment}-aws-sandbox-accounts-account-pool"
  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !FindInMap [EnvMap, !Ref Environment, DomainName]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !FindInMap [EnvMap, !Ref Environment, DomainName]
          HostedZoneId: !ImportValue hosted-zone-id
  APIAccessLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "${Environment}-aws-sandbox-accounts-api-access-logs"
      RetentionInDays: 7
  API:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt APIAccessLogGroup.Arn
        Format: $context.requestId
      Auth:
        Authorizers:
          OAuth2Authorizer:
            JwtConfiguration:
              issuer:
                Fn::ImportValue: !Sub "${Environment}-cognito-user-pool-provider-url"
              audience:
                - Fn::ImportValue: !Sub "${Environment}-aws-sandbox-accounts-interface-client-id"
            IdentitySource: $request.header.Authorization
        DefaultAuthorizer: OAuth2Authorizer
      CorsConfiguration:
        AllowHeaders:
          - authorization
          - client
        AllowMethods:
          - GET
          - OPTIONS
        AllowOrigins:
          - !Sub
            - "https://${Domain}"
            - Domain: !FindInMap [EnvMap, !Ref Environment, DomainName]
          - !If [IsTest, "http://localhost:5173", !Ref AWS::NoValue]
        MaxAge: 60
      Domain:
        CertificateArn: !Ref APICertificate
        DomainName: !FindInMap [EnvMap, !Ref Environment, DomainName]
        MutualTlsAuthentication: false
        Route53:
          HostedZoneId: !ImportValue hosted-zone-id
  Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: aws_sandbox_accounts_api.main.handler
      Runtime: python3.11
      CodeUri: ../../build
      Role: !GetAtt FunctionExecutionRole.Arn
      FunctionName: !Sub "${Environment}-aws-sandbox-accounts-api"
      LoggingConfig:
        ApplicationLogLevel: INFO
        LogGroup: !Ref FunctionLogGroup
        LogFormat: JSON
        SystemLogLevel: WARN
      MemorySize: 256
      Timeout: 5
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Sub "${Environment}-aws-sandbox-accounts-account-pool"
      Events:
        API:
          Type: HttpApi
          Properties:
            ApiId: !Ref API
            Path: /{proxy+}
            Method: ANY
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html#http-api-cors-default-route
        OptionsPreflight:
          Type: HttpApi
          Properties:
            ApiId: !Ref API
            Path: /{proxy+}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
